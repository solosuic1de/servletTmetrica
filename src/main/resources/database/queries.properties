#user dao
user.add=INSERT INTO users (email, password, name) VALUES (?, ?, ?)
user.get.email=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id WHERE u.email = ? GROUP BY id,email, name, password
user.get.all=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id GROUP BY id,email, name, password
user.get.id=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id WHERE u.id = ? GROUP BY id,email, name, password
#user_roles dao
role.add=INSERT INTO user_roles(user_id, role) VALUES (?, ?)
#activity dao
activity.get.all=SELECT * FROM activities
activity.get.id=SELECT * from activities WHERE id = ?
activity.create=INSERT INTO activities (name, opening_time, status) VALUES (?, ?, ?)
activity.update=UPDATE activities SET status = ? WHERE id = ?
activity.add.user=INSERT INTO users_activities(user_id, activities_id) VALUES (?, ?)
activity.delete.user=START TRANSACTION ; SET CONSTRAINTS ALL DEFERRED ; DELETE FROM users_activities where user_id = ?1 and activities_id = ?2 ; COMMIT TRANSACTION;
#log dao
log.get.id=SELECT * FROM activities_logs WHERE id = ?
log.get.all=SELECT * FROM activities_logs
log.add=INSERT INTO activities_logs (activity_id, user_id, start_time, end_time) VALUES(?, ?, ?, ?)
log.update=UPDATE activities_logs SET activity_id = ?, user_id = ?, start_time = ?, end_time = ? WHERE id = ?
log.remove=DELETE FROM activities_logs where id = ?
#order dao
order.get.id=SELECT * FROM orders WHERE id = ?
order.get.all=SELECT * FROM orders
order.create=INSERT INTO orders (action, activity_id, user_id, status) VALUES (?, ?, ?, ?)
order.remove=DELETE FROM orders WHERE id =?
order.update=UPDATE orders SET status = ? WHERE id = ?
